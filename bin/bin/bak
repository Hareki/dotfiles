#!/bin/bash

backup_dotfiles() {
  echo -e "start backing up \e[32mdotfiles\e[0m..."
  echo "=========================================="
  # Copy the configuration files
  cp ~/.zshrc ~/work/personal/repositories/dotfiles/zsh/
  cp ~/.p10k.zsh ~/work/personal/repositories/dotfiles/p10k/
  cp ~/.tmux.conf ~/work/personal/repositories/dotfiles/tmux/

  # Navigate to the repository directory
  cd ~/work/personal/repositories/dotfiles/

  # Check for changes in the repository
  if git status --porcelain | grep -q .; then
    # Changes are present, proceed with add, commit, and push
    git add .
    git commit -m "updated via bak at $(date)"
    git push
  else
    echo "nothing to commit, working tree clean"
  fi
}

backup_nvim() {
  echo -e "start backing up \e[32mnvim\e[0m..."
  echo "=========================================="
  # Navigate to the repository directory
  cd ~/.config/nvim

  # Check for changes in the repository
  if git status --porcelain | grep -q .; then
    # Changes are present, proceed with add, commit, and push
    git add .
    git commit -m "updated via bak at $(date)"
    git push
  else
    # No changes, print message
    echo "nothing to commit, working tree clean"
  fi
}

# Function to display usage
usage() {
  echo "ERROR: No option provided, use one of the following:"
  echo -e "  -d    Backup \e[32mdotfiles\e[0m to 'hareki/dotfiles' repository"
  echo -e "  -l    Backup \e[32mnvim\e[0m to 'hareki/nvim' repository"
  exit 1
}

# Initialize an array to store options
options=()

# Parse command line options
while getopts "dl" opt; do
  case $opt in
  d)
    options+=("dotfiles")
    ;;
  l)
    options+=("nvim")
    ;;
  \?)
    usage
    ;;
  esac
done

# Check if no option was provided
if [ ${#options[@]} -eq 0 ]; then
  usage
fi

# Execute functions in the order of options provided
for i in "${!options[@]}"; do
  option="${options[$i]}"
  if [ "$option" == "dotfiles" ]; then
    backup_dotfiles
  elif [ "$option" == "nvim" ]; then
    backup_nvim
  fi
  # Print an empty line if the current option is not the last one
  if [ $i -lt $((${#options[@]} - 1)) ]; then
    echo ""
  fi
done
