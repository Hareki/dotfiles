#!/bin/bash

print_start_message() {
  config_name=$1
  echo -e "start restoring \e[32m${config_name} config\e[0m..."
}

print_finish_message() {
  config_name=$1
  echo -e "finished restoring \e[32m${config_name} config\e[0m"
}

restore_tmux() {
  print_start_message "tmux"
  cp ~/work/personal/repositories/dotfiles/tmux/.tmux.conf ~/.tmux.conf
  print_finish_message "tmux"
}

restore_zsh() {
  print_start_message "zsh"
  cp ~/work/personal/repositories/dotfiles/zsh/.zshrc ~/.zshrc
  print_finish_message "zsh"
}

restore_p10k() {
  print_start_message "p10k"
  cp ~/work/personal/repositories/dotfiles/p10k/.p10k.zsh ~/.p10k.zsh
  print_finish_message "p10k"
}

restore_bin() {
  print_start_message "bin scripts"
  cp -r ~/work/personal/repositories/dotfiles/bin ~
  print_finish_message "bin scripts"
}

restore_dotfiles() {
  echo -e "START RESTORING \e[31mALL DOTFILE CONFIGS\e[0m..."
  echo "=========================================="
  restore_zsh
  echo "------------------------------------------"
  restore_p10k
  echo "------------------------------------------"
  restore_tmux
  echo "------------------------------------------"
  restore_bin
  echo "=========================================="
  echo -e "FINISHED RESTORING \e[31mALL DOTFILE CONFIGS\e[0m"
}

restore_nvim() {
  print_start_message "nvim"
  cd ~/.config/nvim
  git reset --hard
  print_finish_message "nvim"
}

restore_all() {
  restore_nvim
  restore_dotfiles
}

# Function to display usage
print_usage() {
  echo -e "Usage: $0 [OPTION]..."
  echo -e "Restore configuration files."
  echo -e ""
  echo -e "Options:"
  echo -e "  --tmux     Restore \e[32mtmux\e[0m config"
  echo -e "  --zsh      Restore \e[32mzsh\e[0m config"
  echo -e "  --p10k     Restore \e[32mp10k\e[0m config"
  echo -e "  --bin      Restore \e[32mbin\e[0m scripts"
  echo -e "  --dotfiles Restore \e[32mall dotfiles\e[0m configs"
  echo -e "  --nvim     Restore \e[32mnvim\e[0m config"
  echo -e "  --all      Restore \e[32mall dotfiles and nvim\e[0m configs"
  echo -e "  --help     Display this help and exit"
}

# Function to handle error usage message
usage() {
  echo "ERROR: No option provided, use one of the following:"
  print_usage
  exit 1
}

# Initialize an array to store options
options=()

# Parse command line options
while [[ "$1" != "" ]]; do
  case $1 in
  --tmux)
    options+=("tmux")
    ;;
  --zsh)
    options+=("zsh")
    ;;
  --p10k)
    options+=("p10k")
    ;;
  --bin)
    options+=("bin")
    ;;
  --dotfiles)
    options+=("dotfiles")
    ;;
  --nvim)
    options+=("nvim")
    ;;
  --all)
    options+=("all")
    ;;
  --help)
    print_usage
    exit 0
    ;;
  *)
    usage
    ;;
  esac
  shift
done

# Check if no option was provided
if [ ${#options[@]} -eq 0 ]; then
  usage
fi

# Execute functions in the order of options provided
for option in "${options[@]}"; do
  case $option in
  tmux)
    restore_tmux
    ;;
  zsh)
    restore_zsh
    ;;
  p10k)
    restore_p10k
    ;;
  bin)
    restore_bin
    ;;
  dotfiles)
    restore_dotfiles
    ;;
  nvim)
    restore_nvim
    ;;
  all)
    restore_all
    ;;
  esac
done
